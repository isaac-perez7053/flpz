#!/bin/bash 



# Ensure current directory is set
cd /home/iperez/projects/flpz || exit

# FLPZ Coupling Program
# Executes the FLPZ (Flexoelectric Piezoelectric) perturbation coupling calculations

# Usage: ./flpzCouple.sh [-e] <input_file> <irrep_1> <irrep_2>
# Use -e flag to run datapointCalcofEnergy.sh instead of datapointCalcofEnergyPert.sh

if [ "$#" -ne 3 ] && [ "$#" -ne 4 ]; then
    echo "Usage: $0  [-e] <input_file> <irrep_1> <irrep_2>"
    exit 1
fi

# Initialize flag variable
run_energy=true

# Parse command line options
while getopts "e" opt; do
  case $opt in
    e)
      run_energy=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

# Read arguments
input_file="$1"
irrep_1="$2"
irrep_2="$3"

# Extraction of variables
read_input_params() {
    structure=$(grep "name" "$input_file" |awk '{print $2}')
    inputIrrep_1=$(grep "inputIrrep_1" "$input_file" | awk '{print $2}')
    inputIrrep_2=$(grep "inputIrrep_2" "$input_file" | awk '{print $2}')
    inputData_1=$(grep "inputData_1" "$input_file" |awk '{print $2}')
    inputData_2=$(grep "inputData_2" "$input_file" | awk '{print $2}')
    bScriptPreamble=$(grep "sbatch_preamble" "$input_file" | awk '{print $2}')
    irrep_1Dir=$(echo "$inputIrrep_1" | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev)
    irrep_2Dir=$(echo "$inputIrrep_2" | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev)

    echo "input_file: $input_file"
    echo "irrep_1: $irrep_1"
    echo "irrep_2: $irrep_2"
    echo "structure: $structure"
    echo "inputIrrep_1: $inputIrrep_1"
    echo "inputIrrep_2: $inputIrrep_2"
    echo "inputData_1: $inputData_1"
    echo "inputData_2: $inputData_2"
    echo "irrep_1Dir: $irrep_1Dir"
    echo "irrep_2Dir: $irrep_2Dir"

    # Read eigendisplacement vectors of both input irrepresentations
    mode_location=$(grep -n "eigen_disp" "$inputIrrep_1" | cut -d: -f1)
    general_structure_file="${irrep_1Dir}/$(grep "genstruc" "$inputIrrep_1" | awk '{print $2}')"
    begin_mode=$((mode_location + 1))
    end_mode=$((begin_mode + $(grep "natom" "$general_structure_file" | awk '{print $2}') - 1))
    eig_disp1=$(sed -n "${begin_mode},${end_mode}p" "$inputIrrep_1")

    echo "mode_location (for eig_disp1): $mode_location"
    echo "general_structure_file: $general_structure_file"
    echo "begin_mode (for eig_disp1): $begin_mode"
    echo "end_mode (for eig_disp1): $end_mode"
    echo "eig_disp1: $eig_disp1"

    mode_location=$(grep -n "eigen_disp" "$inputIrrep_2" | cut -d: -f1)
    general_structure_file="${irrep_2Dir}/$(grep "genstruc" "$inputIrrep_2" | awk '{print $2}')"
    begin_mode=$((mode_location + 1))
    end_mode=$((begin_mode + $(grep "natom" "$general_structure_file" | awk '{print $2}') - 1))
    eig_disp2=$(sed -n "${begin_mode},${end_mode}p" "$inputIrrep_2")

    echo "mode_location (for eig_disp2): $mode_location"
    echo "general_structure_file: $general_structure_file"
    echo "begin_mode (for eig_disp2): $begin_mode"
    echo "end_mode (for eig_disp2): $end_mode"
    echo "eig_disp2: $eig_disp2"

    general_structure_file=$(grep "genstruc" "$input_file" | awk '{print $2}')
}

# Copy necessary files to working directory
handle_files() {
    local source_dir="$1"
    if [ "$2" = "cp" ]; then 
        local files=(
            "energy/eigVecExtEnergy.sh"
            "energy/datapointCalcofEnergy.sh"
            "energy/dataAnalysisEnergy.sh"
            "shared/xredToxcart.sh"
            "shared/xcartToxred.sh"
            "shared/xCartxRed.py"
            "shared/findAngle.py"
            "shared/findSpaceGroup.sh"
            "polynomialFitting/polynomialFitting2D3D.py"
            "phononCoupling/totEnergytoDat.sh"
            "polynomialFitting/onAxisDataPoints.sh"
            "phononCoupling/isoInvariant.sh"
            "phononCoupling/transformCell_Map.m"
            "phononCoupling/transformCell.sh"
            "phononCoupling/eigVecExtension.sh"
            "phononCoupling/datapointCalcofEnergyCouple.sh"
            "perturbations/datapointCalcofPert.sh"
            "energy/datapointCalcofEnergy.sh"
            "phononCoupling/dataAnalysisCouple.sh"
            "polynomialFitting/scientificToDecimal.sh"
            "phononCoupling/transformCell_Map.py"
            "phononCoupling/transformCellpy.sh"
            "phononCoupling/matlabTodat.sh"
            "shared/rprimDiagonalization.py"
            "flpz_input/b-script-flpzCoupleAnalyze"
        )
    elif [ "$2" = "rm" ]; then
        local files=(
            "eigVecExtEnergy.sh"
            "datapointCalcofEnergy.sh"
            "dataAnalysisEnergy.sh"
            "xredToxcart.sh"
            "xcartToxred.sh"
            "xCartxRed.sh"
            "findAngle.py"
            "findSpaceGroup.sh"
            "polynomialFitting2D3D.py"
            "totEnergytoDat.sh"
            "onAxisDataPoints.sh"
            "isoInvariant.sh"
            "transformCell_Map.m"
            "transformCell.sh"
            "eigVecExtension.sh"
            "datapointCalcofEnergyCouple.sh"
            "datapointCalcofEnergy.sh"
            "datapointCalcofPert.sh"
            "dataAnalysisCouple.sh"
            "scientificToDecimal.sh"
            "transformCell_Map.py"
            "transformCellpy.sh"
            "matlabTodat.sh"
            "rprimDiagonalization.py"
        )
    fi
    for file in "${files[@]}"; do
        if [ "$2" = "rm" ]; then
            rm "$source_dir/$file"
        elif [ "$2" = "cp" ]; then
            cp "$source_dir/$file" "$dir/"
        fi
    done
}
 
# Read input variables
echo "input_file: $input_file"
echo "Irrep1: $irrep_1"
echo "Irrep2: $irrep_2"
read_input_params

# Creation of new working directory with necessary files
dir="${structure}_${irrep_1}${irrep_2}_Couple"
mkdir -p "$dir"
handle_files "flpz_code" "cp"
cp "$input_file" "$dir/"
cp "$general_structure_file" "$dir/"
cp "$bScriptPreamble" "$dir/"

# Enter in new working directory 
cd "$dir" || exit

# Include eigenvectors in input file
{
echo "eigen_disp1" 
echo "$eig_disp1" 
echo "eigen_disp2" 
echo "$eig_disp2" 
} >> "$input_file"

echo "Prining input_file"
cat "$input_file"

# Initialization of input data for surface fitting. Stored in a file name 3D_coordinates.dat

bash scientificToDecimal.sh "../$inputData_1"
bash scientificToDecimal.sh "../$inputData_2"

echo "Printing inputData"
echo "../$inputData_1" "../$inputData_2"
echo "InputIrrep_1:"
echo "###############################################"
cat "../$inputIrrep_1"
echo "###############################################"
echo "InputIrrep_2:"
echo "###############################################"
cat "../$inputIrrep_2"
echo "###############################################"
result1=$(bash totEnergytoDat.sh "../$inputData_1" 2>&1)
filename1=$(echo "$result1" | sed -n 's/.*Output written to \(.*\)$/\1/p')
result2=$(bash totEnergytoDat.sh "../$inputData_2" 2>&1)
filename2=$(echo "$result2" | sed -n 's/.*Output written to \(.*\)$/\1/p')
echo "filenames:"
echo "$filename1 $filename2"


bash onAxisDataPoints.sh "$filename1" "$filename2"

echo "Printing the contents of 3D_coordinates.dat"
cat "3D_coordinates.dat"

# This line of code will take the old eigendisplacement vector and the new target cell and will not
# only map which atoms are which in the new cell, but will convert
# the old eigendisplacement vector to be valid for the new cell. 

if [ "$(echo "${eig_disp1}" | wc -l)" -gt "$(echo "${eig_disp2}" | wc -l)" ]; then
    echo "eig_disp1 was greater than eig_disp2"

    neweig_disp2="$(bash eigVecExtension.sh -p "$eig_disp2" "$(bash transformCellpy.sh "../$inputIrrep_2" "../$inputIrrep_1" \
    | sed -n '/Mapping =/,/^$/p' \
    | tail -n +2 \
    | awk '{print $1}' \
    | grep '^[0-9]*$')")"

    echo "Printing the new eigen displacement"
    echo "$neweig_disp2"

    #Update the eigendisplacement value in the input file. 
    sed -i '' "s/${eig_disp2}/${neweig_disp2}/g" "$input_file"
else
    echo "eig_disp2 was greater than eig_disp1"
    echo "$eig_disp1"

    # Run the transformCellpy.sh script and capture its output
    output=$(bash transformCellpy.sh "../$inputIrrep_1" "../$inputIrrep_2")

    # Extract the "Mapping" array
    mapping=$(echo "$output" | grep -A 1 "Mapping:" | tail -n 1)

    # Output or store the extracted mapping
    echo "Extracted Mapping: $mapping"
    echo "eig_disp2: $eig_disp2"
    neweig_disp1="$(bash eigVecExtension.sh -p "$eig_disp2" "$mapping")"
    echo "Printing neweig_disp1: $neweig_disp1"
    echo "SED"
    #Update the eigendisplacement value in the input file. 
    # Create a temporary file
    temp_file=$(mktemp)

    # Escape special characters in the search string
    escaped_search=$(printf '%s\n' "$eig_disp1" | sed 's/[[\.*^$/]/\\&/g')

    # Perform the substitution
    awk -v search="$escaped_search" -v replace="$neweig_disp1" '
        {
            if (index($0, search) == 1) {
                print replace
                for (i = 1; i < NF; i++) {
                    getline
                }
            } else {
                print
            }
        }
    ' "$input_file" > "$temp_file"

    # Replace the original file with the modified content
    mv "$temp_file" "$input_file"

fi
# Calculate datapoints and store points into 3D_coordinates.dat 
if [ "$run_energy" = true ]; then
  bash datapointCalcofEnergy.sh "$input_file" 
else
  bash datapointCalcofPert.sh "$input_file"
fi

